@using NoteToSelf.Shared.Models

<div class="job-status">
    <h3>@X (@Items.Count())</h3>

    <ul class="dropzone @dropClass" ondragover="event.preventDefault();"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">

        @*<MyItem Item="topItem" />*@
        @foreach (var item in this.Items)
        {
            <MyItem Item="item" />
        }
    </ul>
</div>

@code {

    #region DRAGGED_OVER

    private ItemData draggedOver;

    private ItemData topItem;

    [Parameter] public int X { get; set; }

    [CascadingParameter] MyContainer Container { get; set; }
    [Parameter]
    public ItemData DraggedOver
    {
        get
        {
            return draggedOver;
        }
        set
        {
            draggedOver = value;

            if(draggedOver != null && Container.CurrentItem != null && draggedOver.Id == Container.CurrentItem.Id)
            {
                Console.WriteLine("DRAG OVER SAME ITEM");
                return;
            }

            if (this.Items != null)
            {
                this.Items = this.Items.Where(x => x.Id != -1).ToList();
            }

            if (value != null && value.Id != -1 && value.X == X)
            {
                float y = draggedOver.Y;

                ItemData dummyData = new ItemData
                {
                    Y = y + 0.5f,
                    X = X,
                    Id = -1,
                    LastUpdated = DateTime.Now,
                    Text = "SOME TEXT",
                    IsTopItem = true,
                };

                this.Items.Add(dummyData);

                this.Items = this.Items.OrderBy(x => x.Y).ToList();

                Console.WriteLine("ON DRAGGED SET:" + X);
            }
        }
    }

    #endregion

    private List<ItemData> Items { get; set; } = new List<ItemData>();

    string dropClass = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.topItem = new ItemData
        {
            Id = -2,
            IsTopItem = true,
            LastUpdated = DateTime.Now,
            Text = "",
            X = this.X,
            Y = -1,
        };
    }

    protected override void OnParametersSet()
    {
        List<ItemData> newItems = Container.Items.Where(x => x.X == X).Where(x => x.Id != -1).OrderBy(x => x.Y).ToList();
        List<ItemData> myItems = this.Items.Where(x => x.Id != -1).OrderBy(x => x.Y).ToList();

        bool shouldUpdate = false;

        if (newItems.Count == myItems.Count)
        {
            for (int i = 0; i < myItems.Count; i++)
            {
                ItemData myData = myItems[i];
                ItemData newData = newItems[i];

                if (myData.Id != newData.Id)
                {
                    shouldUpdate = true;
                    break;
                }
            }
        }
        else
        {
            shouldUpdate = true;
        }

        if (shouldUpdate)
        {
            Console.WriteLine("UPDATING IGTEMS FROM OnParametersSet " + this.X);
            this.Items.Clear();
            this.Items = newItems;
        }
    }

    private void HandleDragEnter()
    {
        dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        ///TODO: Write this
    }

    private void HandleDragEnter(ItemData data)
    {
        ///TODO: Write this
    }
}