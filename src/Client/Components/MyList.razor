@using NoteToSelf.Shared.Models

<div class="job-status">
    <h3>@X (@Items.Count())</h3>

    <ul class="dropzone @dropClass" ondragover="event.preventDefault();"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">

        <MyItem Item="topItem" />
        @foreach (var item in this.Items)
        {
            <MyItem Item="item" />
        }
    </ul>
</div>

@code {

    #region DRAGGED_OVER

    private int previousDraggedOverId = -3;

    private int idForWitchDummyDataWasGeneratedLast = -3;

    private ItemData draggedOver;

    private ItemData topItem;

    [Parameter] public EventCallback<ItemData> AddDummyItem { get; set; }
    [Parameter] public EventCallback<string> RemoveDummyItems { get; set; }

    [Parameter] public int X { get; set; }
    [CascadingParameter] MyContainer Container { get; set; }
    [Parameter]
    public ItemData DraggedOver
    {
        get
        {
            return draggedOver;
        }
        set
        {
            DraggedOverSet(value);
        }
    }

    #endregion

    private List<ItemData> Items { get; set; } = new List<ItemData>();

    string dropClass = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.topItem = new ItemData
        {
            Id = -2,
            IsTopItem = true,
            LastUpdated = DateTime.Now,
            Text = "",
            X = this.X,
            Y = -1,
        };
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParametersSet");

        this.Items.Clear();
        this.Items = this.Container.Items.Where(x => x.X == this.X).OrderBy(x=>x.Y).ToList();
    }

    private void HandleDragEnter()
    {
        dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        ///TODO: Write this
    }

    private void HandleDragEnter(ItemData data)
    {
        ///TODO: Write this
    }

    private async void DraggedOverSet(ItemData value)
    {
        draggedOver = value;

        if(value == null) { return; }

        if(previousDraggedOverId == value.Id)
        {
            return;
        }
        else
        {
            previousDraggedOverId = value.Id;
        }

        if (draggedOver != null && Container.CurrentItem != null && draggedOver.Id == Container.CurrentItem.Id)
        {
            Console.WriteLine("DRAG OVER SAME ITEM");
            return;
        }

        if (value.Id != -1 && value.X == X)
        {
            float y = value.Y;

            ItemData dummyData = new ItemData
            {
                Y = y + 0.5f,
                X = X,
                Id = -1,
                LastUpdated = DateTime.Now,
                Text = "SOME TEXT",
                IsTopItem = true,
            };

            if (value.Id != this.idForWitchDummyDataWasGeneratedLast)
            {
                await this.RemoveDummyItems.InvokeAsync("Whatever");
            }
            
            this.idForWitchDummyDataWasGeneratedLast = value.Id;

            await this.AddDummyItem.InvokeAsync(dummyData);

            this.Items = this.Items.OrderBy(x => x.Y).ToList();

            Console.WriteLine("ON DRAGGED SET:" + X);
        }
    }
}