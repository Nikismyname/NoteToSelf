@using NoteToSelf.Shared.Models;
@implements IDisposable;

@if (someVar)
{
    <li class="@parentClass">
        <div class="draggable @(string.Join(' ', this.Item.ClassList))"
             draggable="true"
             title="@Item.Id"
             @ondragstart="@((e) => HandleDragStart(e))"
             @ondragenter="@((e) => HandleDragEnter(e))"
             @ondragend="@((e) => HandleDragEnd(e))">
            <p class="description">@Item.Text</p>
        </div>
    </li>
}
else
{
    <p draggable="true">Some</p>
}

@code {
    [CascadingParameter] MyContainer MyContainer { get; set; }
    [Parameter] public ItemData Item { get; set; }

    private bool someVar = true;

    private string parentClass = "";

    private string invisibleClass = string.Empty;

    protected override void OnParametersSet()
    {
        if (this.Item.IsTopItem)
        {
            this.Item.ClassList.Add("myInvisibleItem");
        }
        else
        {
            this.Item.ClassList.RemoveAll(x => x == "myInvisibleItem");
        }
    }

    private void HandleDragStart(DragEventArgs args)
    {
        if (Item.Id == -1) { return; }
        this.MyContainer.SetCurrentItem(this.Item);
        this.Item.ClassList.Add("myBackgroundDark");
    }

    private void HandleDragEnd(DragEventArgs args)
    {
        if (Item.Id == -1) { return; }
        this.Item.ClassList.RemoveAll(x => x == "myBackgroundDark");
    }

    private void HandleDragEnter(DragEventArgs args)
    {
        if (this.Item.Id == -1) { return; }
        this.MyContainer.OnDragEnter(this.Item);
    }

    public void Dispose()
    {
        Console.WriteLine($"Disposed Item with ID: {this.Item.Id}");
    }
}