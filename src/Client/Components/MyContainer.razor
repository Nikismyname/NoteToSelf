@using NoteToSelf.Shared.Models;

@*AddDummyItem="HandleAddDummyItem" RemoveDummyItems="HandleRemoveDummyItems"*@

<div class="jobs-container">
    <CascadingValue Value="this">
        <MyList X="1" DraggedOver="DraggedOver" />
        <MyList X="2" DraggedOver="DraggedOver" />
        <MyList X="3" DraggedOver="DraggedOver" />
    </CascadingValue>
</div>

@code {
    [Parameter] public List<ItemData> Items { get; set; }

    public ItemData CurrentItem { get; set; }

    public ItemData DraggedOver { get; set; }

    public void SetCurrentItem(ItemData item)
    {
        this.CurrentItem = item;
        //this.Items = this.Items.Where(x => x.Id != this.CurrentItem.Id).ToList();
        //this.StateHasChanged();
    }

    public void SetDraggedOver(ItemData data)
    {
        this.DraggedOver = data;
        Console.WriteLine("TEST:::::::::::::::::::::::::::::::::");
        this.StateHasChanged();
    }

    public void RemoveDummyData()
    {
        Console.WriteLine("Removing Dummy Data!");
        //this.HandleRemoveDummyItems("Trigger State Has Changed!");
    }

    //public void DragEnd()
    //{
    //    //this.Items.Add(this.CurrentItem);
    //    //this.StateHasChanged();
    //}

    //private void HandleAddDummyItem(ItemData item)
    //{
    //    this.Items.Add(item);
    //}

    //private void HandleRemoveDummyItems(string notUsed)
    //{
    //    this.Items = this.Items.Where(x => x.Id != -1).ToList();

    //    if (notUsed == "Trigger State Has Changed!")
    //    {
    //        this.StateHasChanged();
    //    }
    //}

    public void OnDragEnter(ItemData draggedOverItem)
    {
        if (draggedOverItem.X != this.CurrentItem.X)
        {
            this.CurrentItem.X = draggedOverItem.X;
            this.CurrentItem.Y = draggedOverItem.Y + 0.5f;
        }
        else
        {
            float currItemY = this.CurrentItem.Y;
            CurrentItem.Y = draggedOverItem.Y;
            draggedOverItem.Y = currItemY;
            this.StateHasChanged();
        }
    }
}